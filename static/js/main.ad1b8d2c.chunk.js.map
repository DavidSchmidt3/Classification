{"version":3,"sources":["Settings.js","App.js","index.js"],"names":["Settings","className","FormControl","variant","sx","m","minWidth","InputLabel","id","Select","labelId","name","value","this","props","ks","label","onChange","changeK","Array","map","x","i","MenuItem","Box","width","Typography","Slider","handleSlider","pointsCount","valueLabelDisplay","size","step","marks","min","max","Button","onClick","startClassification","React","points","y","color","App","e","setState","target","copyKs","k","index","Number","state","copyPoints","point","getColor","randomInt","Math","floor","random","classify","currentPoints","closestPoints","distance","sqrt","pow","push","sort","a","b","length","j","z","occurances","indexOf","classifiedPoints","count","classificationsArray","plotPointsX","plotPointsY","plotColors","Error","newPoint","classifiedPoint","successRates","toFixed","forEach","mapPlots","plots","data","mode","type","marker","layout","height","title","markerStyles","Component","darkTheme","createTheme","palette","ReactDOM","render","StrictMode","ThemeProvider","theme","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.ad1b8d2c.chunk.js","sourcesContent":["import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport Slider from '@mui/material/Slider';\n\nexport default class Settings extends React.Component {\n  render() {\n    return (\n      <div className=\"settings\">\n        <h2 className=\"m-2\">Úvodné nastavenia</h2>\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <InputLabel id=\"kLabel0\">Prvé K</InputLabel>\n          <Select\n            labelId=\"kLabel0\"\n            id=\"k0\"\n            name=\"0\"\n            value={this.props.ks[0]}\n            label=\"Prvé K\"\n            onChange={this.props.changeK}\n          >\n            {[...Array(20)].map((x, i) => {\n              if (i % 2 === 1)\n                return <MenuItem value={i}>{i}</MenuItem>\n              else return null;\n            })}\n          </Select>\n        </FormControl>\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <InputLabel id=\"kLabel1\">Druhé K</InputLabel>\n          <Select\n            labelId=\"kLabel1\"\n            id=\"k1\"\n            name=\"1\"\n            value={this.props.ks[1]}\n            label=\"Druhé K\"\n            onChange={this.props.changeK}\n          >\n            {[...Array(20)].map((x, i) => {\n              if (i % 2 === 1)\n                return <MenuItem value={i}>{i}</MenuItem>\n              else return null;\n            })}\n          </Select>\n        </FormControl>\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <InputLabel id=\"kLabel0\">Tretie K</InputLabel>\n          <Select\n            labelId=\"kLabel2\"\n            id=\"k2\"\n            name=\"2\"\n            value={this.props.ks[2]}\n            label=\"Tretie K\"\n            onChange={this.props.changeK}\n          >\n            {[...Array(20)].map((x, i) => {\n              if (i % 2 === 1)\n                return <MenuItem value={i}>{i}</MenuItem>\n              else return null;\n            })}\n          </Select>\n        </FormControl>\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <InputLabel id=\"kLabel3\">Štvrté K</InputLabel>\n          <Select\n            labelId=\"kLabel3\"\n            id=\"k3\"\n            name=\"3\"\n            value={this.props.ks[3]}\n            label=\"Tretie K\"\n            onChange={this.props.changeK}\n          >\n            {[...Array(20)].map((x, i) => {\n              if (i % 2 === 1)\n                return <MenuItem value={i}>{i}</MenuItem>\n              else return null;\n            })}\n          </Select>\n        </FormControl>\n        <Box className=\"box\" sx={{ width: 300 }}>\n          <Typography className='title'>Počet bodov</Typography>\n          <Slider\n            aria-label=\"Počet bodov\"\n            name=\"pointsCount\"\n            onChange={this.props.handleSlider}\n            value={this.props.pointsCount}\n            valueLabelDisplay=\"on\"\n            size=\"small\"\n            className=\"slider\"\n            step={1000}\n            marks\n            min={1000}\n            max={20000}\n          />\n        </Box>\n        <Button onClick={this.props.startClassification} className=\"ml-5 mb-5 button\" variant=\"outlined\">Začať algoritmus</Button>\n      </div >\n    );\n  }\n}","import React from 'react';\nimport Plot from 'react-plotly.js';\nimport Settings from './Settings';\n\nlet points = [\n  { x: -4500, y: -4400, color: 'red' },\n  { x: 2500, y: -3400, color: 'green' },\n  { x: -4100, y: 3000, color: 'blue' },\n  { x: -4100, y: -3000, color: 'red' },\n  { x: 4500, y: -4400, color: 'green' },\n  { x: -1800, y: -2400, color: 'red' },\n  { x: -2500, y: -3400, color: 'red' },\n  { x: 2000, y: -1400, color: 'green' },\n  { x: 4100, y: -3000, color: 'green' },\n  { x: -2000, y: -1400, color: 'red' },\n  { x: -2500, y: 3400, color: 'blue' },\n  { x: -4500, y: 4400, color: 'blue' },\n  { x: 1800, y: -2400, color: 'green' },\n  { x: 4100, y: 3000, color: 'purple' },\n  { x: 4500, y: 4400, color: 'purple' },\n  { x: -1800, y: 2400, color: 'blue' },\n  { x: 2500, y: 3400, color: 'purple' },\n  { x: 1800, y: 2400, color: 'purple' },\n  { x: -2000, y: 1400, color: 'blue' },\n  { x: 2000, y: 1400, color: 'purple' }\n];\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      successRates: [0, 0, 0, 0],\n      pointsCount: 1000,\n      ks: [1, 3, 7, 15],\n      plotPointsX: [[], [], [], []],\n      plotPointsY: [[], [], [], []],\n      markerStyles: [],\n      plotColors: [{ color: [] }, { color: [] }, { color: [] }, { color: [] }]\n    }\n\n    this.points = this.copyPoints(points);\n    this.classifiedPoints = [this.copyPoints(this.points), this.copyPoints(this.points), this.copyPoints(this.points), this.copyPoints(this.points)];\n  }\n\n  handleSlider = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  copyKs = ks => {\n    return ks.map(k => k);\n  }\n\n  changeK = e => {\n    let index = Number(e.target.name);\n    let ks = this.copyKs(this.state.ks);\n    ks[index] = Number(e.target.value);\n\n    this.setState({ ks });\n  }\n\n  copyPoints = points => {\n    return points.map(point => {\n      return { x: point.x, y: point.y, color: point.color };\n    });\n  }\n\n  getColor = (x, y) => {\n    if (x < 500 && y < 500)\n      return 'red';\n    if (x > -500 && y < 500)\n      return 'green';\n    if (x < 500 && y > -500)\n      return 'blue';\n    else\n      return 'purple';\n  }\n\n  randomInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  classify = (x, y, k, currentPoints) => {\n    let closestPoints = [];\n\n    for (let i = 0; i < k; i++) {\n      let distance = Math.sqrt(Math.pow(currentPoints[i].x - x, 2) + Math.pow(currentPoints[i].y - y, 2));\n      closestPoints.push({ index: i, distance, color: currentPoints[i].color });\n    }\n\n    closestPoints.sort((a, b) => {\n      let x = a.distance < b.distance ? -1 : 1;\n      return x;\n    });\n\n    for (let i = k; i < currentPoints.length; i++) {\n      let distance = Math.sqrt(Math.pow(currentPoints[i].x - x, 2) + Math.pow(currentPoints[i].y - y, 2))\n      for (let j = 0; j < k; j++) {\n        if (distance < closestPoints[j].distance) {\n          for (let z = k - 1; z > j; z--) {\n            closestPoints[z] = closestPoints[z - 1]\n          }\n          closestPoints[j] = { index: i, distance, color: currentPoints[i].color }\n          break;\n        }\n      }\n    }\n\n    let occurances = [0, 0, 0, 0];\n    let color;\n    for (let i = 0; i < k; i++) {\n      color = closestPoints[i]['color']\n      switch (color) {\n        case 'red':\n          occurances[0] += 1;\n          break;\n        case 'green':\n          occurances[1] += 1;\n          break;\n        case 'blue':\n          occurances[2] += 1;\n          break;\n        default:\n          occurances[3] += 1;\n          break;\n      }\n    }\n\n    let colors = ['red', 'green', 'blue', 'purple'];\n    let colorIndex = occurances.indexOf(Math.max(...occurances));\n\n    return { 'x': x, 'y': y, 'color': colors[colorIndex] }\n  }\n\n  getColor = color => {\n    switch (color) {\n      case 'red':\n        return 'rgb(255, 0, 0)';\n      case 'green':\n        return 'rgb(0, 255, 0)';\n      case 'blue':\n        return 'rgb(0, 0, 255)';\n      default:\n        return 'rgb(112, 41, 99)';\n    }\n  }\n\n  startClassification = async () => {\n    this.points = this.copyPoints(points);\n    this.classifiedPoints = [this.copyPoints(this.points), this.copyPoints(this.points), this.copyPoints(this.points), this.copyPoints(this.points)];\n\n    let count = this.state.pointsCount;\n    let ks = this.state.ks;\n    let classificationsArray = [0, 0, 0, 0];\n    let plotPointsX = [[], [], [], []];\n    let plotPointsY = [[], [], [], []];\n    let plotColors = [{ color: [] }, { color: [] }, { color: [] }, { color: [] }];\n\n    for (let i = 0; i < count; i++) {\n      let x, y, color;\n      let number = this.randomInt(1, 100);\n      if (number === 100) {\n        x = this.randomInt(-5000, 5000);\n        y = this.randomInt(-5000, 5000);\n        color = this.getColor(x, y);\n      }\n      else {\n        switch (i % 4) {\n          case 0:\n            x = this.randomInt(-5000, 499);\n            y = this.randomInt(-5000, 499);\n            color = 'red';\n            break;\n          case 1:\n            x = this.randomInt(-499, 5000);\n            y = this.randomInt(-5000, 499);\n            color = 'green';\n            break;\n          case 2:\n            x = this.randomInt(-5000, 499);\n            y = this.randomInt(-499, 5000);\n            color = 'blue'\n            break;\n          case 3:\n            x = this.randomInt(-499, 5000);\n            y = this.randomInt(-499, 5000);\n            color = 'purple';\n            break;\n          default:\n            throw new Error(\"Error\");\n        }\n      }\n\n      let newPoint = { x, y, color };\n      this.points.push(newPoint);\n\n      for (let j = 0; j < 4; j++) {\n        let k = ks[j]\n        let classifiedPoint = this.classify(newPoint.x, newPoint.y, k, this.classifiedPoints[j])\n        this.classifiedPoints[j].push(classifiedPoint);\n\n\n        if (classifiedPoint['color'] === this.points[i]['color'])\n          classificationsArray[j] += 1\n      }\n    }\n\n    let successRates = [0, 0, 0, 0];\n\n    for (let i = 0; i < classificationsArray.length; i++) {\n      successRates[i] = ((classificationsArray[i] / count) * 100).toFixed(2);\n    }\n\n    for (let i = 0; i < 4; i++) {\n      this.classifiedPoints[i].forEach(point => {\n        plotPointsX[i].push(point.x);\n        plotPointsY[i].push(point.y);\n        plotColors[i].color.push(point.color);\n      })\n    }\n\n    this.setState({ plotPointsX, plotPointsY, plotColors, successRates });\n  }\n\n\n  mapPlots = () => {\n    let plots = []\n    for (let i = 0; i < 4; i++) {\n      plots.push(<Plot\n        key={i}\n        data={[\n          {\n            x: this.state.plotPointsX[i],\n            y: this.state.plotPointsY[i],\n            mode: 'markers',\n            type: 'scatter',\n            marker: this.state.plotColors[i],\n          }\n        ]}\n        layout={{ width: 1600, height: 800, title: `K = ${this.state.ks[i]}, Success rate = ${this.state.successRates[i]} %` }}\n      />)\n    }\n\n    return plots;\n  }\n\n\n  render() {\n    return (\n      <>\n        <Settings\n          handleSlider={this.handleSlider}\n          startClassification={this.startClassification}\n          pointsCount={this.state.pointsCount}\n          ks={this.state.ks}\n          changeK={this.changeK}\n        />\n        <div className='center'>\n          {this.mapPlots()}\n        </div>\n      </>\n    );\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport App from './App';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport './index.css';\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: 'dark',\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}